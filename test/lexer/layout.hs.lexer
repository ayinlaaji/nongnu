module
AStack
SYNTAX_(
Stack
,
;
push
,
pop
,
top
,
size
SYNTAX_)
where
{
data
Stack
a
=
Empty
|
MkStack
a
SYNTAX_(
Stack
a
SYNTAX_)
;
push
::
a
->
Stack
a
->
Stack
a
push
x
s
=
MkStack
x
s
;
size
::
Stack
a
->
Int
;
size
s
=
length
SYNTAX_(
stkToLst
s
SYNTAX_)
where
{
stkToLst
Empty
=
[
]
;
stkToLst
SYNTAX_(
MkStack
x
s
SYNTAX_)
=
x:xs
where
{
xs
=
stkToLst
s
}
}
;
pop
::
Stack
a
->
SYNTAX_(
a
,
Stack
a
SYNTAX_)
;
pop
SYNTAX_(
MkStack
x
s
SYNTAX_)
=
SYNTAX_(
x
,
case
s
of
{
r
->
i
r
where
{
i
x
=
x
}
}
SYNTAX_)
;
top
::
Stack
a
->
a
;
top
SYNTAX_(
MkStack
x
s
SYNTAX_)
=
x
}
