
module AStack _( Stack , push , pop , top , size _) where
{ data Stack a = Empty
| MkStack a _( Stack a _)

; push :: a -> Stack a -> Stack a
; push x s = MkStack x s

; size :: Stack a -> Int
; size s = length _( stkToLst s _) where
{ stkToLst Empty = _[ _]
; stkToLst _( MkStack x s _) = x:xs where { xs = stkToLst s

} } ; pop :: Stack a -> _( a , Stack a _)
; pop _( MkStack x s _)
= _( x , case s of { r -> i r where { i x = x } } _)

; top :: Stack a -> a
; top _( MkStack x s _) = x
}
