
module CONID _( CONID , VARID , VARID , VARID , VARID _) where
{ data CONID VARID = CONID
| CONID VARID _( CONID VARID _)

; VARID :: VARID -> CONID VARID -> CONID VARID
; VARID VARID VARID = CONID VARID VARID

; VARID :: CONID VARID -> CONID
; VARID VARID = VARID _( VARID VARID _) where
{ VARID CONID = _[ _]
; VARID _( CONID VARID VARID _) = x:xs where { VARID = VARID VARID

} } ; VARID :: CONID VARID -> _( VARID , CONID VARID _)
; VARID _( CONID VARID VARID _)
= _( VARID , case VARID of { VARID -> VARID VARID where { VARID VARID = VARID } } _)

; VARID :: CONID VARID -> VARID
; VARID _( CONID VARID VARID _) = VARID
}
