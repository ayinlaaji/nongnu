
module CONID « CONID , VARID , VARID , VARID , VARID » where
{ data CONID VARID = CONID
| CONID VARID « CONID VARID »

; VARID :: VARID -> CONID VARID -> CONID VARID
; VARID VARID VARID = CONID VARID VARID

; VARID :: CONID VARID -> CONID
; VARID VARID = VARID « VARID VARID » where
{ VARID CONID = []
; VARID « CONID VARID VARID » = VARID CONSYM VARID where { VARID = VARID VARID

} } ; VARID :: CONID VARID -> « VARID , CONID VARID »
; VARID « CONID VARID VARID »
= « VARID , case VARID of { VARID -> VARID VARID where { VARID VARID = VARID } } »

; VARID :: CONID VARID -> VARID
; VARID « CONID VARID VARID » = VARID
}
