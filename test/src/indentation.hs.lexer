








module CONID where

{ import CONID
; import CONID VARID « VARID ,
VARID
»

; VARID = do
{ VARID <- VARID VARID VARID
; VARID <- VARID VARID
VARID
VARID
; VARID
; VARID VARID
; let { VARID = VARID VARID
VARID
; VARID = VARID
; VARID =
VARID
} ; VARID VARID

} ; VARID =
do { VARID <- VARID
; do { VARID <- VARID
; VARID

} } ; VARID VARID VARID = VARID VARID VARID
where
{ VARID = VARID VARID
; VARID = VARID VARID
where
{ VARID VARID = VARID
; VARID = VARID

} } ; VARID VARID VARID = let
{ VARID = VARID
; VARID _ = VARID
; in
VARID VARID

} ; VARID VARID VARID =
let { VARID = VARID
; VARID = VARID
} in VARID

; VARID VARID = case VARID of
{ CONID ->
§
; CONID VARID ->
VARID

} ; VARID = \case
{ CONID -> §
; CONID VARID -> VARID

} ; VARID VARID CONID = VARID $
§ §
§
; VARID VARID « CONID VARID » = VARID $ \ VARID ->
VARID

; VARID = do
{ VARID <- VARID $ VARID VARID
; VARID SYMID
VARID

} ; data CONID = CONID CONID
| CONID CONID
| CONID CONID
}
