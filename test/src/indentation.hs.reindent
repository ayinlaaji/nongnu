v
-- | Idealised indentation scenarios.
v
--
v
--   Bugs and unexpected behaviour in (re-)indentation may be documented here.
v
--
v
--   Lines marked "manual correction" indicate where we expect the user to
v
--   re-indent because it goes against our prediction. In some of these cases,
v
--   we could improve the guess with semantic information (e.g. if we know that
v
--   the RHS of a bind is only partially applied, then we probably mean to
v
--   continue that line instead of start a new one).
v
module Indentation where
v

v
import Foo.Bar
1          v            2
import Foo.Baz hiding ( gaz,
1                     2 v
                        baz
2                     v 1
                      )
v                     1 2

2 1        v          3 4
basic_do = do
1 v      2
  foo <- blah blah blah
2 1      v      3
  bar <- blah blah
2 1      v
         blah -- manual correction
2 1      v
         blah -- manual correction
2 1      v
  sideeffect
2 v   1  3
  sideeffect' blah
3 1      4  2 v
  let baz = blah blah
3 2   1  4  v
            blah -- manual correction
2 3   1  4  v
      gaz = blah
3 4   1 25  v
      haz =
3 2   1 v4  5
        blah
2 3   v 14  5
  pure faz -- manual correction
1 v   2 34  5

2 v  13 45  6
nested_do = -- manual correction
v       1
  do foo <- blah
3    1  2   v         4
     do bar <- blah -- same level as foo
3    2  1   4  v
        baz -- same level as bar
1    2  v   3  4

2 1  v  3   4  5
nested_where a b = foo a b
1 v 2
  where -- manual correction
1   v
    foo = bar baz -- indented
2   1     v
    baz = blah blah -- same level as foo
2   v   1
      where -- manual correction
1   2   v
        gaz a = blah -- indented
2   3   1       v
        faz = blah -- same level as gaz
1   2   v

2 1 v   3
let_in a b = let
1 v
  blah = bloo
2 1      v
  wobble _ = fish
3 1 2        v
  in
2 1 v
    flibble blah
2 v 1

2 v 3 1
implicit_let foo bar =
v     1
  let ?foo = foo
3 2   1      v
      ?bar = bar
1     v
  in  rar
v 1   2

1 v   2
case_of wibble = case wibble of
1 v 2
  Nothing   ->
2 1 v
    ""
1 2 v
  Just fish ->
2 1 v
    fish
2 v 1

1 v 2
lambda_case = \case
1 v
  Nothing   -> ""
2 1            v
  Just fish -> fish
1 v

1 v
dollars f Nothing = f $
1 v
  "" ""
1 v
  ""
1 v
dollars f (Just a) = f $ \s ->
1 v
  a
v 1

1 v
not_dollars = do
1 v      2
  db' <- liftIO $ readMVar db
4 1 3    2        v
  shouldGoHere <$>
2 1 v    3
    here
2 v 1    3

2 v 3    4  1
data Wibble = Wibble Int
1           v
            | Wobble Int
1           v
            | Vibble Int
v           1

2 1         3        v
data Record1 = Record1 {
1 v
  fieldA :: String
2 1      v
, fieldB :: String
v
}
v

2 1            v
data Record2 = Record2
1 2            v
  { fieldA :: String
1 v
  , fieldB :: String
1 v
  }
v 1

2 v      1
lists1 = [ foo
1        v
         , bar
2        v 1
         , [ blah
2        1 v
           , blah
2        1 v
           , blah ]
2        v 1
         ]
v        1 2

2 1      v 3
lists2 = [
1 v
  foo
1 v
, bar
v
]
v

2        v 1
lists3 = [ foo ,
1          v
           bar ]
v          1

2        v13
tuples1 = ( foo
1         v
          , bar
2         v 1
          , ( blah
2         1 v
            , blah
2         1 v
            , blah )
2         v 1
          )
v         1 2

2 1       v 3
tuples2 = (
1 v
  foo
1 v
, bar
v
)
v

2         v 1
tuples3 = ( foo ,
1           v
            bar )