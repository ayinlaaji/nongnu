-- | Idealised indentation scenarios.
v
--
v
--   Bugs and unexpected behaviour in (re-)indentation may be documented here.
v
--
v
--   Lines marked "manual correction" indicate where we expect the user to
v
--   re-indent because it goes against our prediction. In some of these cases,
v
--   we could improve the guess with semantic information (e.g. if we know that
v
--   the RHS of a bind is only partially applied, then we probably mean to
v
--   continue that line instead of start a new one).
v
module Indentation where
v

v
import Foo.Bar
v
import Foo.Baz hiding ( gaz,
1                       v
                        baz
1                       v
                      )
v                     1 2

v                     1 2
basic_do = do
1 v
  foo <- blah blah blah
2 v      1
  bar <- blah blah
2 v      1
         blah -- manual correction
2 v      1
         blah -- manual correction
2 v      1
  sideeffect
1 v      2
  sideeffect' blah
1 v      2
  let baz = blah blah
2 1   v  3
            blah -- manual correction
2 3   v  4  1
      gaz = blah
1 2   v  3  4
      haz =
2 3   1 v4  5
        blah
2 3   v 14  5
  pure faz -- manual correction
1 v   2 34  5

1 v   2 34  5
nested_do = -- manual correction
1 v
  do foo <- blah
2    v      1
     do bar <- blah -- same level as foo
3    1  v   4  2
        baz -- same level as bar
1    2  v   3  4

1    2  v   3  4
nested_where a b = foo a b
v
  where -- manual correction
1   v
    foo = bar baz -- indented
1   v
    baz = blah blah -- same level as foo
1   v
      where -- manual correction
1   2   v
        gaz a = blah -- indented
1   2   v
        faz = blah -- same level as gaz
1   2   v

1   2   v
let_in a b = let
1 v
  blah = bloo
1 v
  wobble _ = fish
1 v
  in
2 1 v
    flibble blah
2 v 1

1 v 2
implicit_let foo bar =
1 v
  let ?foo = foo
2 1   v
      ?bar = bar
1 2   v
  in  rar
v 1   2

v 1   2
case_of wibble = case wibble of
1 v
  Nothing   ->
2 1 v
    ""
2 v 1
  Just fish ->
2 1 v
    fish
2 v 1

1 v 2
lambda_case = \case
1 v
  Nothing   -> ""
1 v
  Just fish -> fish
1 v

1 v
dollars f Nothing = f $
1 v
  "" ""
v 1
  ""
v 1
dollars f (Just a) = f $ \s ->
1 v
  a
v 1

v 1
not_dollars = do
1 v
  db' <- liftIO $ readMVar db
2 v      1
  shouldGoHere <$>
2 1 v    3
    here
2 v 1    3

1 v 2    3
logic a =
1 v
  if a > 0
1 v
  then a
1 v
  else -a
1 v

1 v
data Wibble = Wibble Int
1           v
            | Wobble Int
1           v
            | Vibble Int
1           v

1           v
data Record1 = Record1 {
1 v
  fieldA :: String
v 1
, fieldB :: String
v
}
v

v
data Record2 = Record2
1            v
  { fieldA :: String
1 v
  , fieldB :: String
1 v
  }
v 1

v 1
data Record3 = Record3 String Text
1            v
               deriving (Show)
v              1

v              1
data Record4 = Record3 String Text deriving (Show)
v

v
lists1 = [ foo
1        v
         , bar
1        v
         , [ blah
2        1 v
           , blah
1        2 v
           , blah ]
2        v 1
         ]
v        1 2

v        1 2
lists2 = [
1 v
  foo
v 1
, bar
v
]
v

v
lists3 = [ foo ,
1          v
           bar ]
v          1

v          1
tuples1 = ( foo
1         v
          , bar
1         v
          , ( blah
2         1 v
            , blah
1         2 v
            , blah )
2         v 1
          )
v         1 2

v         1 2
tuples2 = (
1 v
  foo
v 1
, bar
v
)
v

v
tuples3 = ( foo ,
1           v
            bar )
v           1

v           1
typesig :: a -> b -> c
v

v
types1 ::
1    v
     Monad m
2 v  1
  => a
1 v  2
  -> b
1 v  2
  -> c
1 v  2

v 1  2
types2 :: (Monad m, MemberLogger m)
1 v
  => a
1 v
  -> b
1 v
  -> c
1 v

v 1
types2b
1 v
  :: (Monad m, MemberLogger m)
1 v
  => a
1 v
  -> b
1 v
  -> c
1 v

v 1
types3 :: (Monad m, MonadReader Foo m) =>
1         v
          (?log :: HasLogger m) =>
1         v
          a -> b -> c
v         1

v         1
types_short :: Foo -> Bar
v

v