«x:{-# LANGUAGE OverloadedStrings   #-}»
«x:{-# LANGUAGE ScopedTypeVariables #-}»

«m:-- »«x:| This file is a medley of various constructs and some corner cases
»«:haskell-tng:keyword:module» «:haskell-tng:module:Foo.Bar.Main»
  «:haskell-tng:keyword:(» «:haskell-tng:type:Wibble»«:haskell-tng:keyword:(..),» «:haskell-tng:type:Wobble»«:haskell-tng:keyword:(»«:haskell-tng:constructor:Wobb»«:haskell-tng:keyword:,»«:haskell-tng:constructor: »«:haskell-tng:keyword:(»«:haskell-tng:constructor:!!!»«:haskell-tng:keyword:)),» «:haskell-tng:type:Woo»
  «m:-- »«x:* Operations
»  «:haskell-tng:keyword:,» getFooByBar«:haskell-tng:keyword:,» getWibbleByWobble
  «:haskell-tng:keyword:,» «:haskell-tng:keyword:module» «:haskell-tng:module:Bloo.Foo»
  «:haskell-tng:keyword:)» «:haskell-tng:keyword:where»

«:haskell-tng:keyword:import»           «:haskell-tng:module:Control.Applicative» «:haskell-tng:keyword:(»many«:haskell-tng:keyword:,» optional«:haskell-tng:keyword:,» pure«:haskell-tng:keyword:,» «:haskell-tng:keyword:(»<*>«:haskell-tng:keyword:),» «:haskell-tng:keyword:(»<|>«:haskell-tng:keyword:))»
«:haskell-tng:keyword:import»           «:haskell-tng:module:Data.Foldable»       «:haskell-tng:keyword:(»traverse_«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:Data.Functor»        «:haskell-tng:keyword:((»<$>«:haskell-tng:keyword:))»
«:haskell-tng:keyword:import»           «:haskell-tng:module:Data.List»           «:haskell-tng:keyword:(»intercalate«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:Data.Monoid»         «:haskell-tng:keyword:((»<>«:haskell-tng:keyword:))»
«:haskell-tng:keyword:import» «:haskell-tng:keyword:qualified» «:haskell-tng:module:Options.Monad»
«:haskell-tng:keyword:import»  «:haskell-tng:keyword:qualified»  «:haskell-tng:module:Options.Applicative»  «:haskell-tng:keyword:as»  «:haskell-tng:module:Opts»
«:haskell-tng:keyword:import» «:haskell-tng:keyword:qualified» «:haskell-tng:module:Options.Divisible» «m:-- »«x:wibble (wobble)
»   «:haskell-tng:keyword:as» «:haskell-tng:module:Div»
«:haskell-tng:keyword:import» «:haskell-tng:keyword:qualified» «:haskell-tng:module:ProfFile.App»        «:haskell-tng:keyword:hiding» «:haskell-tng:keyword:(»as«:haskell-tng:keyword:,» hiding«:haskell-tng:keyword:,» qualified«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:ProfFile.App»        «:haskell-tng:keyword:(»as«:haskell-tng:keyword:,» hiding«:haskell-tng:keyword:,» qualified«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:ProfFile.App»        «:haskell-tng:keyword:hiding» «:haskell-tng:keyword:(»as«:haskell-tng:keyword:,» hiding«:haskell-tng:keyword:,» qualified«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import» «:haskell-tng:keyword:qualified» «:haskell-tng:module:ProfFile.App»        «:haskell-tng:keyword:(»as«:haskell-tng:keyword:,» hiding«:haskell-tng:keyword:,» qualified«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:System.Exit»         «:haskell-tng:keyword:(»«:haskell-tng:type:ExitCode» «:haskell-tng:keyword:(..),» exitFailure«:haskell-tng:keyword:,» qualified«:haskell-tng:keyword:,»
                                      «:haskell-tng:type:Typey»«:haskell-tng:keyword:,»
                                      wibble«:haskell-tng:keyword:,»
                                      «:haskell-tng:type:Wibble»«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:System.FilePath»     «:haskell-tng:keyword:(»replaceExtension«:haskell-tng:keyword:,» «:haskell-tng:type:Foo»«:haskell-tng:keyword:(»«:haskell-tng:constructor:Bar»«:haskell-tng:keyword:,»«:haskell-tng:constructor: »«:haskell-tng:keyword:(»«:haskell-tng:constructor::<»«:haskell-tng:keyword:))»
«:haskell-tng:keyword:import»           «:haskell-tng:module:System.IO»           «:haskell-tng:keyword:(»«:haskell-tng:type:IOMode» «:haskell-tng:keyword:(..),» hClose«:haskell-tng:keyword:,» hGetContents«:haskell-tng:keyword:,»
                                      hPutStr«:haskell-tng:keyword:,» hPutStrLn«:haskell-tng:keyword:,» openFile«:haskell-tng:keyword:,» stderr«:haskell-tng:keyword:,»
                                      stdout«:haskell-tng:keyword:,» «:haskell-tng:type:MoarTypey»«:haskell-tng:keyword:)»
«:haskell-tng:keyword:import»           «:haskell-tng:module:System.Process»      «:haskell-tng:keyword:(»«:haskell-tng:type:CreateProcess» «:haskell-tng:keyword:(..),» «:haskell-tng:type:StdStream» «:haskell-tng:keyword:(..),»
                                      createProcess«:haskell-tng:keyword:,» proc«:haskell-tng:keyword:,» waitForProcess«:haskell-tng:keyword:)»

«m:-- »«x:some chars that should be propertized
»«:haskell-tng:toplevel:chars» «:haskell-tng:keyword:=» «:haskell-tng:keyword:[»«s:'c'»«:haskell-tng:keyword:,» «s:'\n'»«:haskell-tng:keyword:,» «s:'\''»«:haskell-tng:keyword:]»

«:haskell-tng:toplevel:foo» «:haskell-tng:keyword:=» «s:"wobble (wibble)"»

«:haskell-tng:keyword:class»«:haskell-tng:type: Get a s »«:haskell-tng:keyword:where»
  get «:haskell-tng:keyword:::»«:haskell-tng:type: Set s »«:haskell-tng:keyword:->»«:haskell-tng:type: a
»
«:haskell-tng:keyword:instance»«:haskell-tng:type: »«x:{-# OVERLAPS #-}»«:haskell-tng:type: Get a »«:haskell-tng:keyword:(»«:haskell-tng:type:a ': s»«:haskell-tng:keyword:)»«:haskell-tng:type: »«:haskell-tng:keyword:where»
  get «:haskell-tng:keyword:(»«:haskell-tng:constructor:Ext» a «:haskell-tng:keyword:_)» «:haskell-tng:keyword:=» a

«:haskell-tng:keyword:instance»«:haskell-tng:type: »«x:{-# OVERLAPPABLE #-}»«:haskell-tng:type: Get a s »«:haskell-tng:keyword:=>»«:haskell-tng:type: Get a »«:haskell-tng:keyword:(»«:haskell-tng:type:b ': s»«:haskell-tng:keyword:)»«:haskell-tng:type: »«:haskell-tng:keyword:where»
  get «:haskell-tng:keyword:(»«:haskell-tng:constructor:Ext» «:haskell-tng:keyword:_» xs«:haskell-tng:keyword:)» «:haskell-tng:keyword:=» get xs

«:haskell-tng:keyword:data»«:haskell-tng:type: Options »«:haskell-tng:keyword:=» «:haskell-tng:constructor:Options»
  «:haskell-tng:keyword:{» optionsReportType      «:haskell-tng:keyword:::»«:haskell-tng:type: ReportType
»  «:haskell-tng:keyword:,» optionsProfFile        «:haskell-tng:keyword:::»«:haskell-tng:type: Maybe FilePath
»  «:haskell-tng:keyword:,» optionsOutputFile      «:haskell-tng:keyword:::»«:haskell-tng:type: Maybe FilePath
»  «:haskell-tng:keyword:,» optionsFlamegraphFlags «:haskell-tng:keyword:::»«:haskell-tng:type: »«:haskell-tng:keyword:[»«:haskell-tng:type:String»«:haskell-tng:keyword:]»«:haskell-tng:type:
»  «:haskell-tng:keyword:}» «:haskell-tng:keyword:deriving» «:haskell-tng:keyword:(»«:haskell-tng:type:Eq»«:haskell-tng:keyword:,»«:haskell-tng:type: Show»«:haskell-tng:keyword:)»

«:haskell-tng:keyword:class»«:haskell-tng:type:  »«:haskell-tng:keyword:(»«:haskell-tng:type:Eq a»«:haskell-tng:keyword:)»«:haskell-tng:type: »«:haskell-tng:keyword:=>»«:haskell-tng:type: Ord a  »«:haskell-tng:keyword:where»
  «:haskell-tng:keyword:(»<«:haskell-tng:keyword:),» «:haskell-tng:keyword:(»<=«:haskell-tng:keyword:),» «:haskell-tng:keyword:(»>=«:haskell-tng:keyword:),» «:haskell-tng:keyword:(»>«:haskell-tng:keyword:)»  «:haskell-tng:keyword:::»«:haskell-tng:type: a »«:haskell-tng:keyword:->»«:haskell-tng:type: a »«:haskell-tng:keyword:->»«:haskell-tng:type: Bool
»  max @Foo«:haskell-tng:keyword:,» min        «:haskell-tng:keyword:::»«:haskell-tng:type: a »«:haskell-tng:keyword:->»«:haskell-tng:type: a »«:haskell-tng:keyword:->»«:haskell-tng:type: a
»
«:haskell-tng:keyword:instance»«:haskell-tng:type: »«:haskell-tng:keyword:(»«:haskell-tng:type:Eq a»«:haskell-tng:keyword:)»«:haskell-tng:type: »«:haskell-tng:keyword:=>»«:haskell-tng:type: Eq »«:haskell-tng:keyword:(»«:haskell-tng:type:Tree a»«:haskell-tng:keyword:)»«:haskell-tng:type: »«:haskell-tng:keyword:where»
  «:haskell-tng:constructor:Leaf» a         == «:haskell-tng:constructor:Leaf» b          «:haskell-tng:keyword:=»  a == b
  «:haskell-tng:keyword:(»«:haskell-tng:constructor:Branch» l1 r1«:haskell-tng:keyword:)» == «:haskell-tng:keyword:(»«:haskell-tng:constructor:Branch» l2 r2«:haskell-tng:keyword:)»  «:haskell-tng:keyword:=»  «:haskell-tng:keyword:(»l1==l2«:haskell-tng:keyword:)» && «:haskell-tng:keyword:(»r1==r2«:haskell-tng:keyword:)»
  «:haskell-tng:keyword:_»              == «:haskell-tng:keyword:_»               «:haskell-tng:keyword:=»  «:haskell-tng:constructor:False»

«:haskell-tng:keyword:data»«:haskell-tng:type: ReportType »«:haskell-tng:keyword:=» «:haskell-tng:constructor:Alloc»   «m:-- »«x:^ Report allocations, percent
»                «:haskell-tng:keyword:|» «:haskell-tng:constructor:Entries» «m:-- »«x:^ Report entries, number
»                «:haskell-tng:keyword:|» «:haskell-tng:constructor:Time»    «m:-- »«x:^ Report time spent in closure, percent
»                «:haskell-tng:keyword:|» «:haskell-tng:constructor:Ticks»   «m:-- »«x:^ Report ticks, number
»                «:haskell-tng:keyword:|» «:haskell-tng:constructor:Bytes»   «m:-- »«x:^ Report bytes allocated, number
»                «:haskell-tng:keyword:deriving» «:haskell-tng:keyword:(»«:haskell-tng:type:Eq»«:haskell-tng:keyword:,»«:haskell-tng:type: Show»«:haskell-tng:keyword:)»

«:haskell-tng:keyword:type»«:haskell-tng:type: »«:haskell-tng:keyword:family»«:haskell-tng:type: G a »«:haskell-tng:keyword:where»«:haskell-tng:type:
  G Int »«:haskell-tng:keyword:=»«:haskell-tng:type: Bool
  G a   »«:haskell-tng:keyword:=»«:haskell-tng:type: Char
»
«:haskell-tng:keyword:data»«:haskell-tng:type: Flobble »«:haskell-tng:keyword:=» «:haskell-tng:constructor:Flobble»
  «:haskell-tng:keyword:deriving» «:haskell-tng:keyword:(»«:haskell-tng:type:Eq»«:haskell-tng:keyword:)»«:haskell-tng:type: via »«:haskell-tng:keyword:(»«:haskell-tng:type:NonNegative »«:haskell-tng:keyword:(»«:haskell-tng:type:Large Int»«:haskell-tng:keyword:))»
  «:haskell-tng:keyword:deriving» «:haskell-tng:keyword:stock» «:haskell-tng:keyword:(»«:haskell-tng:type:Floo»«:haskell-tng:keyword:)»
  «:haskell-tng:keyword:deriving» «:haskell-tng:keyword:anyclass» «:haskell-tng:keyword:(»«:haskell-tng:type:WibblyWoo»«:haskell-tng:keyword:,»«:haskell-tng:type: OtherlyWoo»«:haskell-tng:keyword:)»

«:haskell-tng:keyword:newtype»«:haskell-tng:type: Flobby »«:haskell-tng:keyword:=» «:haskell-tng:constructor:Flobby»

«:haskell-tng:toplevel:foo» «:haskell-tng:keyword:::»«:haskell-tng:type:
 Wibble »«m:-- »«x:wibble
»«:haskell-tng:type:    »«:haskell-tng:keyword:->»«:haskell-tng:type: Wobble »«m:-- »«x:wobble
»«:haskell-tng:type:    »«:haskell-tng:keyword:->»«:haskell-tng:type: Wobble »«m:-- »«x:wobble
»«:haskell-tng:type:    »«:haskell-tng:keyword:->»«:haskell-tng:type: Wobble »«m:-- »«x:wobble
»«:haskell-tng:type:    »«:haskell-tng:keyword:->»«:haskell-tng:type: »«:haskell-tng:keyword:(»«:haskell-tng:type:wob »«:haskell-tng:keyword:::»«:haskell-tng:type: Wobble»«:haskell-tng:keyword:)»«:haskell-tng:type:
    »«:haskell-tng:keyword:->»«:haskell-tng:type: »«:haskell-tng:keyword:(»«:haskell-tng:type:Wobble »«m:-- »«x:wobble
»«:haskell-tng:type:    a b c»«:haskell-tng:keyword:)»«:haskell-tng:type:
»
«:haskell-tng:keyword:(»foo «:haskell-tng:keyword:::»«:haskell-tng:type: »«:haskell-tng:keyword:(»«:haskell-tng:type:Wibble Wobble»«:haskell-tng:keyword:))» foo

«:haskell-tng:keyword:newtype»«:haskell-tng:type: TestApp
   »«:haskell-tng:keyword:(»«:haskell-tng:type:logger »«:haskell-tng:keyword:::»«:haskell-tng:type: TestLogger»«:haskell-tng:keyword:)»«:haskell-tng:type:
   »«:haskell-tng:keyword:(»«:haskell-tng:type:scribe »«:haskell-tng:keyword:::»«:haskell-tng:type: TestScribe»«:haskell-tng:keyword:)»«:haskell-tng:type:
   config
   a
   »«:haskell-tng:keyword:=» «:haskell-tng:constructor:TestApp» a

«:haskell-tng:toplevel:optionsParser» «:haskell-tng:keyword:::»«:haskell-tng:type: Opts.Parser Options
»«:haskell-tng:toplevel:optionsParser» «:haskell-tng:keyword:=» «:haskell-tng:constructor:Options»
  <$> «:haskell-tng:keyword:(»«:haskell-tng:module:Opts.»flag' «:haskell-tng:constructor:Alloc» «:haskell-tng:keyword:(»«:haskell-tng:module:Opts.»long «s:"alloc"» <> «:haskell-tng:module:Opts.»help «s:"wibble"»«:haskell-tng:keyword:)»
       <|> «:haskell-tng:module:Opts.»flag' «:haskell-tng:constructor:Entries» «:haskell-tng:keyword:(»«:haskell-tng:module:Opts.»long «s:"entry"» <> «:haskell-tng:module:Opts.»help «s:"wobble"»«:haskell-tng:keyword:)»
       <|> «:haskell-tng:module:Opts.»flag' «:haskell-tng:constructor:Bytes»   «:haskell-tng:keyword:(»«:haskell-tng:module:Opts.»long «s:"bytes"» <> «:haskell-tng:module:Opts.»help «s:"i'm a fish"»«:haskell-tng:keyword:))»
  <*> optional
        «:haskell-tng:keyword:(»«:haskell-tng:module:Opts.»strArgument
          «:haskell-tng:keyword:(»«:haskell-tng:module:Opts.»metavar «s:"MY-FILE"» <>
           «:haskell-tng:module:Opts.»help «s:"meh"»«:haskell-tng:keyword:))»

«:haskell-tng:keyword:type»«:haskell-tng:type: PhantomThing
»
«:haskell-tng:keyword:type»«:haskell-tng:type: SomeApi »«:haskell-tng:keyword:=»«:haskell-tng:type:
       »«s:"thing"»«:haskell-tng:type: :> Capture »«s:"bar"»«:haskell-tng:type: Index :> QueryParam »«s:"wibble"»«:haskell-tng:type: Text
                                               :> QueryParam »«s:"wobble"»«:haskell-tng:type: Natural
                                               :> Header TracingHeader TracingId
                                               :> ThingHeader
                                               :> Get '»«:haskell-tng:keyword:[»«:haskell-tng:type:JSON»«:haskell-tng:keyword:]»«:haskell-tng:type: »«:haskell-tng:keyword:(»«:haskell-tng:type:The ReadResult»«:haskell-tng:keyword:)»«:haskell-tng:type:
  :<|> »«s:"thing"»«:haskell-tng:type: :> ReqBody '»«:haskell-tng:keyword:[»«:haskell-tng:type:JSON»«:haskell-tng:keyword:]»«:haskell-tng:type: Request
                      :> Header TracingHeader TracingId
                      :> SpecialHeader
                      :> Post '»«:haskell-tng:keyword:[»«:haskell-tng:type:JSON»«:haskell-tng:keyword:]»«:haskell-tng:type: »«:haskell-tng:keyword:(»«:haskell-tng:type:The Response»«:haskell-tng:keyword:)»«:haskell-tng:type:
»
«:haskell-tng:keyword:deriving» «:haskell-tng:keyword:instance» «:haskell-tng:constructor:FromJSONKey» «:haskell-tng:constructor:StateName»
«:haskell-tng:keyword:deriving» anyclass «:haskell-tng:keyword:instance» «:haskell-tng:constructor:FromJSON» «:haskell-tng:constructor:Base»
«:haskell-tng:keyword:deriving» «:haskell-tng:keyword:newtype» «:haskell-tng:keyword:instance» «:haskell-tng:constructor:FromJSON» «:haskell-tng:constructor:Treble»

«:haskell-tng:toplevel:foo» «:haskell-tng:keyword:=» bar
  «:haskell-tng:keyword:where» baz «:haskell-tng:keyword:=» «:haskell-tng:keyword:_»
  «m:-- »«x:checking that comments are ignored in layout
»  «m:-- »«x:and that a starting syntax entry is ok
»        «:haskell-tng:keyword:(»+«:haskell-tng:keyword:)» «:haskell-tng:keyword:=» «:haskell-tng:keyword:_»
