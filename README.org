* Evil Numbers
  - Increment / Decrement binary, octal, decimal and hex literals.

  - Works like =C-a= / =C-x= in VIM, i.e. searches for number up to =eol= and then
    increments or decrements.

  - When a region is active, as in evil's visual mode, all the
    numbers within that region will be incremented/decremented (unlike
    in VIM)

  - Increment/decrement numbers incrementally like =g C-a= / =g C-x= in VIM.

  - Optionally keep zero padding (off by default).


** Detected Literals
    - Binary, e.g. =0b0101=, =0B0101=.
    - Octal, e.g. =0o755=, =0O700=.
    - Hexadecimal, e.g. =0xDEADBEEF=, =0XCAFE=.
    - Unicode superscript and subscript, e.g. =²= and =₁=.

** Install
   Put in =load-path=, =(require 'evil-numbers)= and bind, for example:

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
     (global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
     (global-set-key (kbd "C-c C-+") 'evil-numbers/inc-at-pt-incremental)
     (global-set-key (kbd "C-c C--") 'evil-numbers/dec-at-pt-incremental)
   #+END_SRC

   or only in evil's normal state:

   #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
    (define-key evil-normal-state-map (kbd "C-c C-+") 'evil-numbers/inc-at-pt-incremental)
    (define-key evil-normal-state-map (kbd "C-c C--") 'evil-numbers/dec-at-pt-incremental)
   #+END_SRC

   For window system users the keypad =+= and =-= present an alternative that can be
   directly bound without shadowing the regular =+= and =-=:

   #+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map (kbd "<kp-add>") 'evil-numbers/inc-at-pt)
   (define-key evil-normal-state-map (kbd "<kp-subtract>") 'evil-numbers/dec-at-pt)
   (define-key evil-normal-state-map (kbd "C-<kp-add>") 'evil-numbers/inc-at-pt-incremental)
   (define-key evil-normal-state-map (kbd "C-<kp-subtract>") 'evil-numbers/dec-at-pt-incremental)
   #+END_SRC

  Set =evil-numbers/padDefault= to =t= if you want numbers to be padded with
  zeros (numbers with a leading zero are always padded). If you want both
  behaviors, all commands take an optional argument =padded=.

** Usage
   Position cursor over or before the literal and play with your numbers!

** Known Bugs
   See http://github.com/juliapath/evil-numbers/issues

** Contributors
   - Matthew Fidler <matthew.fidler@gmail.com>
   - Michael Markert <markert.michael@gmail.com>
   - Julia Path <julia@jpath.de>
   - Campbell Barton <ideasman42@gmail.com>
