# -*- mode:org; ispell-dictionary:"en_GB"  -*-
#+TITLE: flymake backend clj-kondo
#+AUTHOR: https://turbocafe.keybase.pub

this  package  integrates  clj-kondo  a  clojure  linter  into  emacs'
flymake; if you  use flymake you may have something  like following in
init.el

#+BEGIN_SRC emacs-lisp
(use-package flymake
  :ensure nil
  :bind (([f8] . flymake-goto-next-error)
         ([f7] . flymake-goto-prev-error))
  :hook (prog-mode . (lambda () (flymake-mode t)))
  :config (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake))
#+END_SRC

to use this package get clj-kondo following [[https://github.com/borkdude/clj-kondo/blob/master/doc/install.md][installation instructions]];
then proceed with your preferred way of adding packages

* melpa

#+BEGIN_SRC emacs-lisp
(use-package flymake-kondor
  :ensure t
  :hook (clojure-mode . flymake-kondor-setup))
#+END_SRC

* elget

#+BEGIN_SRC emacs-lisp
(el-get-bundle flymake-kondor
               :url "https://raw.githubusercontent.com/turbo-cafe/flymake-kondor/master/flymake-kondor.el"
               (add-hook 'clojure-mode-hook 'flymake-kondor-setup))
#+END_SRC

* local

#+BEGIN_SRC emacs-lisp
(use-package flymake-kondor
  :ensure flymake-quickdef
  :after flymake
  :load-path "site-lisp/flymake-kondor"
  :hook (clojure-mode . flymake-kondor-setup))
#+END_SRC

when in clojure-mode flymake-mode is activated and you can navigate to
prev/next  error in  buffer;  there's [[https://github.com/borkdude/flycheck-clj-kondo][sister  project]] that  integrates
clj-kondo into flycheck if you use that one
