021-04-30  cage

        * annotate.el:

	- prevented calling 'annotate--remove-annotation-property' on a
	narrowed buffer.

	For some reason (perhaps related to font-locking?) comment-region
	command was calling this function, the fact is that the command
	narrows the buffer before actually adding comments, so the call to
	`point' inside the annotate--remove-annotation-property's body may
	fall outside of the buffer raising an error. This patch prevents
	calling this function on narrowed buffer.

2021-04-23  cage

        * annotate.el:
	- added checks for 'annotate-use-messages' value when trying to
        print a message;
        - replaced 'if' with 'when' when no 'else' branch exists;
        - ensured all annotations are saved before showing summary window.
        - fixed indentation;
        - improved documentation and fixed indentation for a couple of local
        functions.


2021-04-21  cage

        * annotate.el:
	- added comments to local functions of 'annotate-annotate';
        - changed behaviour  when user is annotation  a newline character;
	update an existing annotation on  the line that terminate with the
	newline the  user is  annotation only  if the  existing annotation
	spans the whole line.

2021-04-20  cage

        * annotate.el:
	- skipped saving to database a file with no annotations;
        - allowed removing (or cutting) annotations when buffer is in
        read-only mode;
        - when annotating  a newline, replace annotation if  a single one
	exists on the line that is going to be annotated.

2021-04-19  cage

        * annotate.el:

	- added feature; when the customizable variable
	`annotate-endline-annotate-whole-line' is not nil (default t), and
	the user try to annotate a newline the whole line is annotated
	instead (or the next if the line is empty).
	If `annotate-endline-annotate-whole-line' is nil annotating a newline
	will signal an error.

2021-04-16  cage

        * annotate.el:

	- prevented asking for annotation when trying to annotate a newline
        character.

2021-03-14  cage

        * annotate.el:

	- allowed deleting of annotations for info files;
	- removed useless argument for 'font-lock-flush'.

2021-03-12  cage

        * annotate.el:

	- changed function from 'font-lock-fontify-buffer' to
	'font-lock-flush';
	- changed function calls from 'cl' package to the 'cl-lib'
	equivalents;
	- added missing argument to 'annotate-create-annotation';
	- removed unused functions.

2021-03-11  cage

        * annotate.el:

	- removed warning related to misplaced '(interactive)';
	- removed warning because of expanding a macro that was defined
	later in the code.

2021-02-05  cage

        * annotate.el:

	- fixed 'annotate-previous-annotation-ends'

	'annotate-previous-annotation-ends'  scans   the  buffer  contents
	backward looking for an annotation before a buffer position
        (let's' call this position 'POS').

	If an annotation exists on 'POS' the backward search starts from a
	position less than the starts of said annotation.

	But unfortunately in the local function
	'annotate-previous-annotation-ends' the test to stop the searching
	is wrong.

	This is the code for the local function:

	----

	(cl-labels ((previous-annotation-ends (start)
	  (let ((annotation (annotate-annotation-at start)))
	    (while (and (/= start (point-min))
                        (null annotation))
              (setf start (previous-overlay-change start))
	      (setf annotation (annotate-annotation-at start)))
            annotation))))

	----

	Let's   assume  that   the  annotation   under  'POS'   starts  at
	(point-min), of course this is  the first annotation of the buffer
	and the function should returns nil.

	Then the initial value of  'start' (argument of the local function
	above) is one less the starting  of the annotation under 'POS' and
	-in  this  case-  values  0   (when  '(point-min)'  values  1)  no
	annotations can exist  at 0 and, moreover,  (/= start (point-min))
	is  non nil;  therefore the  test passes  and the  results of  the
	function  is  the  annotation  under the  position  'start'  where
	'start' get the value of (previous-overlay-change start)).

	The latter expression '(previous-overlay-change start)' return the
	position in  the buffer where there  is a change in  an overlay or
	(point-min)  if no  change in  overlay exists;  in the  case under
	examination the  expression returns (point-min) as  the annotation
	under 'POS' is the first in the buffer.

	In conclusion, the function returns  the annotation under 'POS' as
	the annotation that supposed to starts before the annotation under
	'POS', instead of nil!

	To reproduce the bug:

	buffer contents
	****
	****
	^^^
	annotate this portion of the buffer

	****
	*aaa

	then annotate all the non-annotated text.

	AAAA
	Aaaa

	The coloring  of the highlight of  the two annotation will  be the
	same (wrong) while the background  color of the annotation text is
	not (which is correct).

2021-01-15  cage

        * annotate.el:

	- added checking encrypted (GPG) file format.

	In many parts  of the code we  use 'annotate-guess-file-format', a
	function that  try to guess the  format of the file  that produced
	the  contents of  a buffer.

	Sometimes (for example  buffers that shows info  nodes) this check
	is  very   expensive  because   involves  reading   (and  possibly
	decompress  or even  decrypt) the  file contents  and check  for a
	regular expression.

	If  we  could know  in  advance  that  the file  is  symmetrically
	encrypted with GPG we could  skip other, more expensive checks for
	guessing file format (like info files).

2021-01-14 cage

        * annotate.el:

	- added padding also for notes placed on the margin of the window.

2021-01-06  cage

        * annotate.el:

	- prevented side effects of 'split-string'.


2020-12-23  cage

        * annotate.el:

	- changed customizable  variable related to exporting.   As we are
	using  diff-mode   could  instruct   the  executable   to  operate
	accordingly to a command line.

2020-12-23  cage

        * annotate.el:

	- rewritten export and integrate of annotations export use now the
	Emacs diff functions to generate a buffer containing the patch.

2020-12-23  cage

        * annotate.el:

	- fixed export for annotated text made from a single line.

2020-12-22  cage

        * annotate.el:

	- removed code, in integration procedures, that should never runs.

2020-12-22  cage

        * annotate.el:

	- fixed integration of multiline annotated text.

2020-12-20  cage

        * Changelog, NEWS.org, annotate.el:

	- updated version;
	- updated NEWS and Changelog (also fixed grammar for the former).

2020-12-19  cage

        * annotate.el:

	-   moved  'save-match-data'   from   the   function  that   calls
	'annotate--split-lines' inside  the body of the  latter; to remove
	any side-effect.

2020-12-19  cage

        * annotate.el:

	- fixed the width of the last row of the box

2020-12-19  cage

        * annotate.el:

	- wrapped 'annotate-wrap-annotation-in-box' with 'save-match-data.

2020-12-19  cage

        * annotate.el:

	- added procedures to pad multiline annotation text.

2020-12-18  cage

        * annotate.el:

	- extracted  local function  and taken  into account  info node
        names (that should not be expanded).

2020-12-18  cage

        * annotate.el:

	-  stored abbreviated  filenames for  the path  component of  each
	record of the annotations database; - improved a docstring.

2020-12-16 cage

	* Changelog, NEWS.org, annotate.el:

	Updated version and documentations.

2020-12-07  cage

        * README.org, annotate.el:

	- fixed more typos.

2020-12-01  cage

        * README.org, annotate.el:

	- allow overwriting (even partial)  of annotations.  That is, user
	can place an annotation on top of an already existing one. The new
	will  delete  overlapped  portion  of the  old  annotation.   This
	feature    should   not    allow   to    break   an    annotation,
	though. Annotations can not overlaps.

	- added a new customizable variable:

        'annotate-warn-if-hash-mismatch'  when  nil  prevent  printing  of
	warning  when annotation  database's'  hash and  file  has do  not
	match;

	- fixed bug  in alternating coloring of  annotation and underlined
	text;

	- updated README;

	- fixed some typos.

2020-11-22  cage

        * annotate.el:

	- added more docstrings.

2020-11-12  cage

        * annotate.el:

	- prevented getting shared value for 'annotate-file' in
        '%load-annotation-data'.

	This  way  we can  ensure  that  'annotate-file' can  be  declared
	buffer-local and  different annotation  databases can be  used from
	different buffers.

2020-11-11  cage

        * annotate.el:
	- fitted 'annotate-position-inside-chain-p' into   'annotate--position-inside-annotated-text-p';
	- fixed some typos.

2020-11-06  cage

        * annotate.el:

	- Fixed a regression  and some bugs related to
        incorrect calculation of of multiline annotations.

	To reproduce the bugs:

	legend:

	a = annotated text
	* = non annotated text

	- First bug

	Create a multiline annotation using region.

	aaaa
	aaaa
	aaaa    ####

	Place the cursor as below.

	aaaa
	^ cursor
	aaaa
	aaaa    ####

	type a character

	a****
	aaaa
	aaaa    ####

	The annotated text has a "gap"

	Fix proposed: revert to the old (correct behaviour)

	Second bug

	aaaa
	aaaa
	aaaa    ####

	Place the cursor as below.

	aaaa
	^ cursor on the first column
	aaaa
	aaaa    ####

	type some text

	***
	aaa
	aaa    ####

	Save (C-x C-s)

	you  get an  error  on  the echo  area:  "let*:  Wrong type  argument:
	overlayp, nil" and the annotations are not correctly saved.

	Fix proposed: remove the offending code.

	Third bug

	a multiline bug as before

	aaaa
	aaaa
	aaaa    ####

	place the cursor here:

	aaaa
	aaaa
	^ cursor
	aaaa    ####

	type some text

	aaaa
	*****
	aaaa    ####

	Then annotate the same line (C-c C-a):

	aaaa
	aaaa    ####
	aaaa    ####

	we  introduced  a  annotation  in  the gap  of  the  already  existing
	multiline annotation.

	Fix proposed: prevents annotating text inside an annotation.

2020-09-29
        * README.org, annotate.el
	- updated README;
	- increased version;
	- updated NEWS and Changelog.

2020-09-22
        * annotate.el
	- added   command   'annotate-summary-of-file-from-current-pos';
	this command shows a summary window that contains the annotation
	in the  active buffer  that appears after  the cursor  position;
	- added docstrings.

2020-09-20
        * annotate.el
	- fixed indentation.

2020-09-20
        * annotate.el
	- Using "help-echo" to print annotations instead of render it on the
        buffer.
	This feature is optional and can be activated using the
        customizable variable 'annotate-use-echo-area'

2020-09-20
        * README.org
	- Removed internal link because of issue #79.

2020-08-11
	* annotate.el (annotate-annotate, annotate-load-annotation-data
	               annotate-create-annotation, annotate-summary-query-parse-note,
                       annotate-switch-db)

	- Added errors conditions signalling to some functions.

2020-07-01
	* annotate.el (annotate-change-annotation)

	- ensured that the modified status of as buffer is not modified by the local
	function 'delete' in 'annotate-change-annotation';
	- added dependency on 'info'.

2020-06-26
	* annotate.el (annotate-switch-db)
	- Added file argument 'database-file-path',
	  this could help people calling this function in a non interactive
	  way from their code;
	- fixed some typos in documentation and comments.

2020-06-09 Bastian Bechtold, cage
	* annotate.el (annotate-buffers-annotate-mode, annotate-switch-db)
	- added functions to switch the database of annotations used for the emacs session;
	- increased version to 0.8.0

2020-05-18 Bastian Bechtold, cage
	* annotate.el
	- Increased version to 0.7.0 for stable release

2020-01-25 Bastian Bechtold, cage

        * annotate.el (annotate-annotation-force-newline-policy,
                       annotate-annotation-newline-policy-forced-p,
                       annotate-create-annotation,
                       annotate-lineate,
                       annotate-summary-delete-annotation-button-pressed):
        - mitigated bug that prevented rendering of annotation in
          org-mode forcing 'newline' policy for annotation
          positioning.
          See the local function
          'maybe-force-newline-policy' in 'annotate-create-annotation'.
        - chosen the window that contains the current buffer when resizing the annotations
          see variable 'current-window' in 'annotate-lineate';
        - redraw buffer if one of its annotations is deleted
          operating from the summary window.
          see: 'annotate-summary-delete-annotation-button-pressed'.

2020-01-22 Bastian Bechtold, cage

        * annotate.el (annotate--font-lock-matcher):
        - fixed error for regexp search
        Sometimes some modes/package puts overlay on the last character of a
        buffer (notably SLIME when the parenthesis of a form are not
        balanced). This will make 're-search-forward' in the aforementioned
        function fails and font lock becomes a mess (e.g. text color
        disappears).

2020-02-10 Bastian Bechtold, cage
        * annotate.el (annotate--font-lock-matcher annotate-bounds annotate-symbol-strictly-at-point annotate-next-annotation-change annotate-previous-annotation-change annotate-clear-annotations annotate-annotate)
        - prevented fails of fontification of annotated regions
        As we walk across the overlays we can get past the limit;
        - mark buffer as modified even if the only action the user performed
        was clearing annotation (and at least an annotation was present in
        the file)
        - prevented annotation of text marked with a region that overlap with
        an existing annotation.

2020-03-06 Bastian Bechtold, cage
        * annotate.el (annotate-annotation-force-newline-policy annotate-annotation-newline-policy-forced-p annotate-summary-delete-annotation-button-pressed annotate--annotation-builder)

        - used  an heuristic  to force newline  policy when  the annotated
        text  does  not  uses a  standard  fonts  (using  font  height  as
        comparison);

        -  when, in  summary  window,  the delete  button  is pressed  the
        software take care of reload  annotate mode for the visited buffer
        the annotation button is referring to;

        - when re-flowing annotation the window width was calculated always
        for the current buffer (the one with the focus).

2020-03-06 Bastian Bechtold, cage
        * annotate.el

        - each annotation (the overlay, actually) now has a property 'position
          and its  value indicates which  positions the annotations holds  in a
          "chain"  of  annotations.

          Even  if  rendered separately  each  chain  represents a  single
          annotation.

          The last annotation in the chain has position's value equal to -1.

          If  the set  of a  group/chain  is formed  by only  one element  the
          position's value is -1 as well.

          Please note that this changes impacted more or less the whole
          package's code.

2020-03-16 Bastian Bechtold, cage
        * annotate.el (annotate-annotate)

	- fixed annotation picking in 'annotate-annotate'
          at  the  beginning  of  the  function we  was  picking  the  first
	  available  overlay.   So  the annotated  text  contained  multiple
	  overlays and an  annotation was not the first we  missed the last,
	  This means, for example, that the annotation was not modifiable.
2020-03-16 Bastian Bechtold, cage
        * annotate.el (annotate-create-annotation)

	- fixed managing return value of
	"(get-text-property changed-face-pos 'face)"

	When finding  the face of a portion  of buffer, to try to  get the right
	positioning   of   the    annotation,   using:

	"(get-text-property changed-face-pos 'face)"

	the code  assumed this function returned  a symbol (the face  of the
	text) or nil: this is  incorrect according to the documentation; the
	code above can returns a symbol, a plist or even list of symbols.
