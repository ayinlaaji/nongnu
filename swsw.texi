\input texinfo
@setfilename swsw.info
@settitle swsw User Manual
@documentencoding UTF-8
@documentlanguage en

@copying
@quotation
Copyright @copyright{} 2020-2022 Daniel Semyonov

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

@end quotation
@end copying

@dircategory Emacs
@direntry
* swsw: (swsw). Simple window switching.
@end direntry

@titlepage
@title swsw User Manual
@subtitle for version 2.1.
@author Daniel Semyonov
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top swsw User Manual

swsw provides a minor mode for switching to windows using IDs assigned
to them automatically.

@noindent
This manual is for swsw version 2.1.

@insertcopying
@end ifnottex

@menu
* Introduction::
* Installation::
* Usage::
* Customization::
* Keystroke Index::
* Command Index::
* Function Index::
* Variable Index::

@detailmenu
--- The Detailed Node Listing ---

Installation

* Installing a release::
* Installing from the Git repository::

Customization

* Display functions::
* Window commands::

@end detailmenu
@end menu

@node Introduction
@chapter Introduction

swsw provides a minor mode for switching to windows using IDs assigned to them
automatically. It's implementation is simple and extensible, providing various
advanced customization features for users, while keeping the code base small
and easy to hack on.

@node Installation
@chapter Installation

swsw can be installed from NonGNU ELPA:

@table @asis
@item @kbd{M-x package-install RET swsw RET}
@end table

@menu
* Installing a release::
* Installing from the Git repository::
@end menu

@node Installing a release
@section Installing a release

Simply download a release (from <https://dsemy.com/projects/swsw>), and install
it:

@table @asis
@item @kbd{M-x package-install-file RET /path/to/download/swsw-VERSION.tar RET}
@end table

@node Installing from the Git repository
@section Installing from the Git repository

Clone the repository and build the package archive:

@example
$ git clone https://git.sr.ht/~dsemy/swsw
$ cd swsw
$ make
@end example

Install the package:

@table @asis
@item @kbd{M-x package-install-file RET /path/to/clone/swsw-VERSION.tar RET}
@end table

@node Usage
@chapter Usage

In order to use any feature of the package, @code{swsw-mode} must be enabled:

@table @asis
@cindex swsw-mode
@item @kbd{M-x swsw-mode RET}
You can also add @code{(swsw-mode)} to your init file, instead.
@end table

When @code{swsw-mode} is enabled, window IDs are shown as mode line
lighters of the form @code{<ID>} (by default, @xref{Display
functions}), and @code{other-window} (@kbd{C-x o}) is remapped to
@code{swsw-select}.

@table @asis
@kindex C-x o
@cindex swsw-select
@item @kbd{C-x o}
Start window selection (@code{swsw-select}).
This command sets a transient key map in which several window
commands are defined, and window IDs can be selected.
Selecting a window ID (by pressing @kbd{ID}) will switch to window
corresponding to it.

@kindex C-x o m
@cindex swsw-select-minibuffer
@item @kbd{C-x o m}
Switch focus the minibuffer if it's active
(@code{swsw-select-minibuffer}).

@kindex C-x o 0
@cindex swsw-delete
@item @kbd{C-x o 0}
Start window deletion (@code{swsw-delete}).
This command sets a transient key map in which several window
commands are defined, and window IDs can be selected.
Selecting a window ID (by pressing @kbd{ID}) will delete the window
corresponding to it.
@end table

@xref{Window commands} for information regarding defining new commands.

@node Customization
@chapter Customization

All customization, except for defining custom display functions and
custom window commands, can be done through the customize interface:

@table @asis
@item @kbd{M-x customize-group RET swsw RET}
@end table

@defopt swsw-id-chars
Base set of character from which window IDs are constructed. This should be a
list of characters. By default, the home row (@code{a s d f g h j k l}) is
used.
@end defopt

@defopt swsw-id-format
Format string for the window ID. Display functions may use this format string
to display the ID, but they can also ignore it. The string should contain a
single occurrence of @code{%s}, which will be replaced by the ID. By default,
@code{" <%s>"} is used.
@end defopt

@defopt swsw-scope
Scope of all window operations. Used to determine on which frames to track
windows. A value of @code{t} means consider all windows on all frames, @code{0}
(the number zero) means consider all windows on all visible and iconified
frames, @code{visible} means consider all windows on all visible frames and
@code{current} means consider only the currently selected frame. By default,
@code{t} is used.
@end defopt

@menu
* Display functions::
* Window commands::
@end menu

@node Display functions
@section Display functions

Display functions are used to display the ID of each window.

@defopt swsw-display-function
Function used to display the ID of each window. This should either be a
display function or @code{lighter}, in which case window IDs are shown using
a mode line lighter. A display function must accept a single argument, which
will be @code{t} when enabling @code{swsw-mode} and @code{nil} when disabling
it. By default, @code{lighter} is used.
@end defopt

@defun swsw-mode-line-display-function switch
Reference implementation of a ``simple'' display function. Display window IDs on
the mode line if SWITCH isn't @code{nil}, and hide window IDs from the mode
line if SWITCH is @code{nil}. This display function respects
@code{swsw-id-format}.
@end defun

@defun swsw-mode-line-conditional-display-function switch
Reference implementation of a conditional display function. Add a hook to
@code{swsw-before-command-hook} which displays window IDs on the mode line and
add a hook to @code{swsw-after-command-hook} which hides window IDs from the
mode line if SWITCH isn't @code{nil}, and remove those hooks if SWITCH is
@code{nil}. This display function respects @code{swsw-id-format}.
@end defun

@node Window commands
@section Window commands

Window commands are used to perform operations on specific
windows. They are normal commands (interactive functions) which are
bound to a key sequence in @code{swsw-command-map}. @code{swsw-select},
@code{swsw-select-minibuffer} and @code{swsw-delete} are implemented
as window commands.

@defvar swsw--id-map
Key map which is populated automatically with elements corresponding
to all tracked windows. The ID of each window is converted to a vector
(to serve as a key sequence), and corresponds to a command which calls
@code{last-command} with the window corresponding to the ID as the
sole argument. There should be no reason to modify it directly;
it is reset whenever window configuration is updated.
@end defvar

@defvar swsw-command-map
Key map which holds (usually) single character key bindings to window
commands. This key map is set as the parent of @code{swsw--id-map}, so
all window commands are available when it's active, unless they are
shadowed by a window ID.
@end defvar

@defvar swsw-window-count
Amount of windows currently tracked. This variable can be used to
conditionally run window commands.
@end defvar

@defun swsw-run-window-command fun
Run FUN as a window command. Run @code{swsw-before-command-hook}, set
@code{this-command} to FUN, and set @code{swsw--id-map} as a transient
map which runs @code{swsw-after-command-hook} on exit. This function
can be used to easily define new window commands. The hooks ran by
this function are expected by swsw to run for any window command which
requires ID selection; they should be manually added even if this
function isn't used when defining a new window command.
@end defun

@node Keystroke Index
@appendix Keystroke Index

@printindex ky

@node Command Index
@appendix Command Index

@printindex cp

@node Function Index
@appendix Function Index

@printindex fn

@node Variable Index
@appendix Variable Index

@printindex vr

@bye

